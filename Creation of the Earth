#ifndef UNICODE
#define UNICODE
#define UNICODE_WAS_UNDEFINED
#endif

#include <windows.h>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

#include "sgp4/SGP4.h"
#include "sgp4/Tle.h"
#include "sgp4/Util.h"
#include "sgp4/Vector.h"
#include "sgp4/Globals.h"

#define pi 3.14159265f
#define NUM_POINTS 100

// Глобальные переменные
std::vector<POINT> points1;
std::vector<POINT> points2;
float n[3] = { 1.0f, 0.0f, -1.0f };
bool isDragging = false;
bool ytro_bobroe = false;
POINT lastMousePos;
//координаты центра окна
float k_zoom = 0.04;
LONG x_c = 600;
LONG y_c = 300;
LONG R_e = 6400 * k_zoom;

class PointsCloud {
public:
    PointsCloud() {
        N = 0;
        r3 = nullptr;
        points = nullptr;
        mask = nullptr;
    }
    PointsCloud(const int& N_) {
        N = N_;
        r3 = new float* [N];
        for (int i = 0; i < N; i++) {
            r3[i][0] = 0;
            r3[i][1] = 0;
            r3[i][2] = 0;
            mask[i] = true;
        }
        points = new POINT[N];
    }
    void projectCloud(const LONG& R_e, const LONG& x_c, const LONG& y_c, const float* n) {
        const float norm = std::sqrt(n[0] * n[0] + n[1] * n[1]); //нормировочный коэффициент для вектора базиса локальной системы координат, лежащего в плоскости xy
        //cout << "Noot!" << endl;
        float r2[2]; //элемент r3 в локальных координатах плоскости проектирования
        for (int i = 0; i < N; i++) {
            //cout << i << endl;
            r2[0] = 0;
            //cout << "A1" << endl;
            r2[1] = 0;
            //cout << "A2" << endl;
            float t = 2 * pi * i / (N - 1); //параметр уравнения эллипса
            //cout << "B" << endl;
            /*float a1[3]; //a1=c-(c*n)*n
            float a2[3]; //a2=u-(u*n)*n
            float a3[3]; //a3=v-(v*n)*n
            for(int j = 0; j < 3; j++) {
                a1[j] = c[j] - (c[0]*n[0] + c[1]*n[1] + c[2]*n[2]) * n[j];
                a2[j] = u[j] - (u[0]*n[0] + u[1]*n[1] + u[2]*n[2]) * n[j];
                a3[j] = v[j] - (v[0]*n[0] + v[1]*n[1] + v[2]*n[2]) * n[j];
                r3[i][j] = a1[j] + a2[j] * std::cos(t) + a3[j] * std::sin(t);
            }*/
            if (n[0] != 0 || n[1] != 0) {
                //cout << "C0a" << endl;
                r2[0] = (n[1] * r3[i][0] - n[0] * r3[i][1]) / norm;
                //cout << "C1a" << endl;
                r2[1] = r3[i][0] * n[0] * n[2] / std::sqrt(n[0] * n[0] + n[1] * n[1]) + r3[i][1] * n[1] * n[2] / std::sqrt(n[0] * n[0] + n[1] * n[1]) - r3[i][2] * std::sqrt(n[0] * n[0] + n[1] * n[1]);
                //cout << "C2a" << endl;
            }
            else {
                //cout << "C0b" << endl;
                r2[0] = r3[i][0];
                //cout << "C1b" << endl;
                r2[1] = r3[i][1] * -1;
                //cout << "C2b" << endl;
            }
            /*r3[i][0] += 10;
            r3[i][0] *= 20;
            r3[i][1] += 10;
            r3[i][1] *= 20;
            r3[i][2] += 10;
            r3[i][2] *= 20;*/
            //cout << "D1" << endl;
            r2[0] *= k_zoom;
            r2[0] += x_c;
            //cout << "D2" << endl;
            r2[1] *= k_zoom;
            r2[1] += y_c;
            //points.push_back(std::pair(r2[0], r2[1]));
            //points.emplace_back(r2[0], r2[1]); //может быть тут тоже ЛОНГи должны быть
            //cout << "Yeet-yeet!" << endl;
            points[i].x = (LONG)r2[0];
            points[i].y = (LONG)r2[1];
            /*
             * Condition 1 returns true if graphical point ('points[i]') is further from the Earth center than the Earth border itself
             * Condition 2 returns true if physical point ('r3[i]') is located between the plane of projection and the camera (i. e. is located before the Earth)
             */
            mask[i] = (std::sqrt((points[i].x - x_c) * (points[i].x - x_c) + (points[i].y - y_c) * (points[i].y - y_c)) > R_e) || (r3[i][0] * n[0] + r3[i][1] * n[1] + r3[i][2] * n[2] > 0);
            //cout << "Yeet-yeet-yeet!" << endl;
        }
    }

    /*
     * @brief Updates 'mask' array based on the given Earth shape
     * @param R_e - Earth radius (in pixels)
     * @param n - nomera vector of camera plane
     */
    /*void update_mask(const long& R_e, const float* n) {
    }*/

    void set_r3(float**& r3_, const int& N_) {
        N = N_;
        cout << N << endl;
        r3 = r3_;
        /*r3 = new float*[N];
        for(int i  = 0; i < N; i++) {
            cout << i << endl;
            r3[i] = new float[3];
            r3[i][0] = r3_[i][0];
            r3[i][1] = r3_[i][1];
            r3[i][2] = r3_[i][2];
            delete[] r3_[i];
        }*/
        if(points != nullptr)
            delete[] points;
            delete[] mask;
        points = new POINT[N];
        mask = new bool[N];
        //delete[] r3_;
        r3_ = nullptr;
    }
    int get_length() {
        return N;
    }
    POINT* points; //точки для отрисовки проекции в графическом виджете
    bool* mask; //маска массива point: true - точка видна, false - точка закрыта Землёй
private:
    float** r3;
    int N;
};
PointsCloud pc1 = PointsCloud();

// Функция проекции эллипса
void ProjectEllipse(float* c, float* u, float* v, float* n, int N, float norm, std::vector<POINT>& points) {
    points.clear();
    points.resize(N);
    float** r3 = new float* [N];
    float** r2 = new float* [N];
    for (int i = 0; i < N; i++) {
        r3[i] = new float[3];
        r2[i] = new float[2];
    }
    for (int i = 0; i < N; i++) {
        float t = 2 * pi * i / (N - 1);
        float a1[3]; //a1=c-(c*n)*n
        float a2[3]; //a2=u-(u*n)*n
        float a3[3]; //a3=v-(v*n)*n
        for (int j = 0; j < 3; j++) {
            a1[j] = c[j] - (c[0] * n[0] + c[1] * n[1] + c[2] * n[2]) * n[j];
            a2[j] = u[j] - (u[0] * n[0] + u[1] * n[1] + u[2] * n[2]) * n[j];
            a3[j] = v[j] - (v[0] * n[0] + v[1] * n[1] + v[2] * n[2]) * n[j];
            r3[i][j] = a1[j] + a2[j] * std::cos(t) + a3[j] * std::sin(t);
        }
        if (n[0] != 0 || n[1] != 0) {
            r2[i][0] = (n[1] * r3[i][0] - n[0] * r3[i][1]) / norm;
            r2[i][1] = r3[i][0] * n[0] * n[2] / std::sqrt(n[0] * n[0] + n[1] * n[1]) + r3[i][1] * n[1] * n[2] / std::sqrt(n[0] * n[0] + n[1] * n[1]) - r3[i][2] * std::sqrt(n[0] * n[0] + n[1] * n[1]);
        }
        else {
            r2[i][0] = r3[i][0];
            r2[i][1] = r3[i][1] * -1;
        }

        r2[i][0] += 15;
        r2[i][0] *= 50;
        r2[i][1] += 10;
        r2[i][1] *= 50;
        //lines[i].position = sf::Vector2f(r2[i][0], r2[i][1]);
        points[i].x = (LONG)r2[i][0];
        points[i].y = (LONG)r2[i][1];
    }
    for (int i = 0; i < N; i++) {
        delete[] r3[i];
        delete[] r2[i];
    }
    delete[] r3;
    delete[] r2;
}
void ResizeWindowTo90Percent(HWND hWnd) {
    RECT workArea;
    SystemParametersInfo(SPI_GETWORKAREA, 0, &workArea, 0);
    int width = (workArea.right - workArea.left) * 0.9; // - вместо 90% можно сделать любое другое кол-во процентов
    int height = (workArea.bottom - workArea.top) * 0.9;
    int x = workArea.left + (workArea.right - workArea.left - width) / 2;
    int y = workArea.top + (workArea.bottom - workArea.top - height) / 2;
    SetWindowPos(
        hWnd,
        NULL,
        x, y,
        width, height,
        SWP_NOZORDER | SWP_FRAMECHANGED
    );
}
// ААААААААААААААААААДВОКАТ ОБРАБОТЧИК
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
    case WM_CREATE:
        ResizeWindowTo90Percent(hWnd);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_ENTERSIZEMOVE:
        isDragging = true; // Блокируем пересчёт при перемещении окна
        break;
    case WM_LBUTTONDOWN:
        isDragging = true;
        lastMousePos.x = LOWORD(lParam);
        lastMousePos.y = HIWORD(lParam);
        SetCapture(hWnd);
        break;
    case WM_MOUSEMOVE: {
        if (isDragging) {
            POINT currentMousePos;
            currentMousePos.x = LOWORD(lParam);
            currentMousePos.y = HIWORD(lParam);

            // Вычисляем изменение углов
            float dx = lastMousePos.x - currentMousePos.x;
            float dy = lastMousePos.y - currentMousePos.y;

            // Обновляем нормальный вектор
            float theta = acosf(n[2]);
            float phi = atan2f(n[1], n[0]);

            theta += 0.01f * dy;
            phi += 0.01f * dx;

            n[0] = sinf(theta) * cosf(phi);
            n[1] = sinf(theta) * sinf(phi);
            n[2] = cosf(theta);

            // Нормализуем вектор
            float norm = sqrtf(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);
            n[0] /= norm;
            n[1] /= norm;
            n[2] /= norm;

            // Пересчитываем проекции
            float c1[3] = { 0, 0, 0 };
            float u1[3] = { 5, 0, 0 };
            float v1[3] = { 0, 5, 0 };
            float c2[3] = { 1, 0, 0 };
            float u2[3] = { 0, 3, 0 };
            float v2[3] = { 0, 0, 4 };
            float norm2D = sqrtf(n[0] * n[0] + n[1] * n[1]);

            ProjectEllipse(c1, u1, v1, n, NUM_POINTS, norm2D, points1);
            ProjectEllipse(c2, u2, v2, n, NUM_POINTS, norm2D, points2);

            //TLE processing begin
            pc1.projectCloud(R_e, 600, 300, n);
            //TLE processing end

            // Перерисовываем окно
            InvalidateRect(hWnd, NULL, TRUE);

            lastMousePos = currentMousePos;
        }
        break;
    }

    case WM_LBUTTONUP:
        isDragging = false;
        ReleaseCapture();
        break;
    case WM_KEYDOWN:
        if (wParam == VK_ESCAPE) {
            PostQuitMessage(0);
        }
        break;
    case WM_ERASEBKGND:
        return 1;
    case WM_PAINT: {
        ytro_bobroe = true;
        break;
    }
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Точка входа
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // Инициализация данных
    float c1[3] = { 0, 0, 0 };
    float u1[3] = { 5, 0, 0 };
    float v1[3] = { 0, 5, 0 };
    float c2[3] = { 1, 0, 0 };
    float u2[3] = { 0, 3, 0 };
    float v2[3] = { 0, 0, 4 };
    float norm = std::sqrt(n[0] * n[0] + n[1] * n[1]);

    //TLE processing begin
    std::string name = "NOAA 19";
    std::string line1 = "1 33591U 09005A   24062.45833333  .00000061  00000-0  88872-5 0  9993";
    std::string line2 = "2 33591  99.1926 184.7784 0013268 304.8974  55.0816 14.12402469820552";
    libsgp4::Tle tle(name, line1, line2);
    libsgp4::SGP4 sgp4(tle);
    float startTime = 0.0;
    float endTime = 100.0;
    float timeStep = 0.1;
    int i;
    int r_len = (endTime - startTime) / timeStep;
    cout << r_len << endl;
    float** r = new float* [r_len];
    for (double time = startTime; time <= endTime; time += timeStep) {
        libsgp4::Eci eci = sgp4.FindPosition(time);
        //std::cout << eci.Position() << std::endl;
        i = (time - startTime) / timeStep;
        cout << i << endl;
        r[i] = new float[3];
        r[i][0] = eci.Position().x;
        r[i][1] = eci.Position().y;
        r[i][2] = eci.Position().z;
        cout << r[i][0] << " " << r[i][1] << " " << r[i][2] << endl;
    }
    cout << "Orbit array generated" << endl;
    pc1.set_r3(r, i + 1);
    //cout << r[0][0] << endl;
    cout << "R3 array set" << endl;
    pc1.projectCloud(R_e, 600, 300, n);

    //TLE processing end
    cout << "TLE processed" << endl;

    POINTS* earth = new POINTS[360];
    for(int i = 0; i < 360; i++){
        earth[i].x = R_e * std::sin((float)i / 180 * pi) + x_c;
        earth[i].y = R_e * std::cos((float)i / 180 * pi) + y_c;
    }

    cout << "Earth created" << endl;

    ProjectEllipse(c1, u1, v1, n, NUM_POINTS, norm, points1);
    ProjectEllipse(c2, u2, v2, n, NUM_POINTS, norm, points2);
    // Регистрация класса окна
    WNDCLASS wc = { 0 };
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = L"SputnikTracker";
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"Ошибка регистрации класса окна!", L"Ошибка", MB_ICONERROR);
        return 1;
    }
    HWND hWnd = CreateWindow(
        L"SputnikTracker", L"SPUTNIK Tracker",
        WS_OVERLAPPEDWINDOW | WS_VISIBLE,
        CW_USEDEFAULT, CW_USEDEFAULT,
        800, 600,
        NULL, NULL, hInstance, NULL
    );
    if (!hWnd) {
        MessageBox(NULL, L"Ошибка создания окна!", L"Ошибка", MB_ICONERROR);
        return 1;
    }
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        if (ytro_bobroe == true) {
            ytro_bobroe = false;
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);

            HDC hdc_pamiat = CreateCompatibleDC(hdc); // Это мы создаём "контекст устройства в памяти"
            RECT rc;
            GetClientRect(hWnd, &rc); // создаёт прямоугольник, где можно рисовать
            HBITMAP hbm_rastr = CreateCompatibleBitmap(hdc, rc.right, rc.bottom); //добавляем растровое изоб
            SelectObject(hdc_pamiat, hbm_rastr);

            // Отрисовка в буфер
            FillRect(hdc_pamiat, &rc, (HBRUSH)(COLOR_WINDOW + 1));

            HPEN hPen = CreatePen(PS_SOLID, 2, RGB(255, 0, 0));
            HPEN hOldPen = (HPEN)SelectObject(hdc_pamiat, hPen);

            if (!points1.empty() and !points2.empty()) {
                MoveToEx(hdc_pamiat, points1[0].x, points1[0].y, NULL);
                for (size_t i = 1; i < points1.size(); i++) {
                    LineTo(hdc_pamiat, points1[i].x, points1[i].y);
                }
                LineTo(hdc_pamiat, points1[0].x, points1[0].y);

                MoveToEx(hdc_pamiat, points2[0].x, points2[0].y, NULL);
                for (size_t i = 1; i < points2.size(); i++) {
                    LineTo(hdc_pamiat, points2[i].x, points2[i].y);
                }
                LineTo(hdc_pamiat, points2[0].x, points2[0].y);

                //TLE processing begin
                MoveToEx(hdc_pamiat, (int)pc1.points[0].x, (int)pc1.points[0].y, NULL);
                for (size_t i = 1; i < pc1.get_length(); i++) {
                    if(pc1.mask[i])
                        LineTo(hdc_pamiat, (int)pc1.points[i].x, (int)pc1.points[i].y);
                    else
                        MoveToEx(hdc_pamiat, (int)pc1.points[i].x, (int)pc1.points[i].y, NULL);
                }
                if(pc1.mask[0])
                    LineTo(hdc_pamiat, (int)pc1.points[0].x, (int)pc1.points[0].y);
                //TLE processing end

                hPen = CreatePen(PS_SOLID, 2, RGB(0, 0, 0));
                hOldPen = (HPEN)SelectObject(hdc_pamiat, hPen);
                MoveToEx(hdc_pamiat, earth[0].x, earth[0].y, NULL);
                for (size_t i = 1; i < 360; i++) {
                    LineTo(hdc_pamiat, earth[i].x, earth[i].y);
                }
                LineTo(hdc_pamiat, earth[0].x, earth[0].y);
            }
            BitBlt(hdc, 0, 0, rc.right, rc.bottom, hdc_pamiat, 0, 0, SRCCOPY); //это мы из буфера копируем на экран

            DeleteObject(hbm_rastr); //Функция DeleteObject удаляет логическое перо, кисть, шрифт,
            //растровое изображение, область или палитру, освобождая все системные ресурсы, связанные с объектом.
            //После удаления объекта указанный дескриптор больше не действует. - из Microsoft

            DeleteDC(hdc_pamiat); // Функция DeleteDC удаляет указанный контекст устройства (DC).
            DeleteObject(hPen); // ручку удаялем

            EndPaint(hWnd, &ps);
        }
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

#ifdef UNICODE_WAS_UNDEFINED
#undef UNICODE
#endif
